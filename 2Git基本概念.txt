1.git版本库，git工作目录；
git版本库只是一个简单数据库，包含所有用来维护与管理项目的修订版本和历史的信息，所有数据存放在工作区.git目录下，
在.git 文件夹里面还有很多文件，其中有一个index 文件 就是暂存区也可以叫做 stage ,git还为我们自动生成了一个分支master以及指向该分支的指针head。
git维护两个主要的数据结构：对象库（object store）和索引（index）
工作目录就是自己建立的项目的文件夹位置

2.工作区、暂存区和版本库联系
平时我们使用的命令git add file1 是把文件从工作区提交到暂存区
当执行git commit -m "tijiao" 后文件即从暂存区到了master分支上面

3.git对象类型
git放在对象库里的对象只有四种类型：
块(blob)  //一个blob对象保存一个文件的数据（即文件内容），但不包含任何关于这个文件的元数据，连文件名也没有。
目录树(tree)  //一个目录树对象代表一层目录信息。它记录blob标识符、路径名和在一个目录里所有文件的一些元数据。
提交(commit)
标签(tag),
这四种原子对象构成git高层数据结构的基础。
blob对象是数据结构的低端，它什么也不引用而且只被树对象引用。
树对象指向若干blob对象，也可能指向其他树对象。
一个提交对象指向一个特定的树对象，并且这个树对象是由提交对象引入版本库的。每个标签可以指向最多一个提交对象。

4.索引
索引是一个临时的、动态的而仅是文件，它描述整个版本库的目录结构，索引捕获项目在某个时刻的整体结构的一个版本。
索引会记录和保存文件的变更，保障它们的安全直至它们被提交。

5.git追踪内容  
git里的SHA1、散列码和对象ID都是指同一个东西
git的内容追踪主要表现为两种关键方式
a.git对象库基于其对象内容的散列计算的值，如果两个文件的内容完全相同，无论是否在相同目录，git在对象库中只保存一份blob。
git只根据文件的内容来计算每一个文件的散列码，如果内容相同，那么SHA1值就是相同的，然后将这个blob对象放在数据库中，并以SHA1值作为索引。
b.当文件从一个版本变到下一个版本的时候，git的内部数据库有效地存储每个文件的各个版本，而不是它们的差异。因为git使用一个文件的全部内容的散列值作为文件名，所以它必须对每个文件的完整副本进行操作。

6.git对象库图示
圆角矩形表示master，虽然分支不是一个基本的git对象
一个圆圈表示一个提交对象
一个三角形表示一个树对象
blob是数据结构的“底端”，由矩形表示
各对象id写在图形外一侧

7.文件和树
git通过目录树对象来跟踪文件的路径名。当使用git add命令时，git会给添加的每个文件的内容创建一个对象，但不会马上为树创建一个对象。但是，索引会更新，每次执行命令，git都会用新的路径名和blob信息来更新索引。即，当对版本库内容做出修改时，索引会做出对应更新，但是不会自动创建新的树对象，如果需要创建新的树对象，那么任何时候，都可以从当前索引创建一个树对象，当然，当对修改进行提交时，系统会自动创建。
git write-tree  //通过捕获索引当前信息的快照创建一个树对象
示例：将根目录下2.txt拷贝到新建文件夹test下，通过索引创建树对象，观察结果。

8.提交 commit
前面讲到一个提交对象指向一个特定的树对象，那么当用git add-tree命令生成树对象后可以创建提交对象

9.标签 tag  //git tag 给当前分支打标签，标签是提交对象的引用
标签是git管理的一种对象，分为轻量级的和带附注的
轻量级的标签不会再版本库里创建永久对象，而带标注的标签会更加充实，并且会创建一个对象。
git tag -m "new tag" V1.0 3ede462   //创建一个带有提交信息、带附注且未签名的标签
git rev-parse V1.0 //显示标签对象的SHA1值
git show V1.0  //查看标签版本信息
git cat file -p   //查看标签对象

$ git tag -a v0.1.2 -m “0.1.2版本”  //创建标签
$ git tag -d v0.1.2  //删除标签