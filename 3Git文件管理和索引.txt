1.索引：git在工作目录和版本库之间添加了一层索引，用来暂存、收集和修改。在工作目录下编辑，在索引中积累修改，然后把索引中累积的修改作为一次性的变更来进行提交。
在工作目录下而不在索引中的变更是没暂存的，因此也不会提交。
如果不先了解索引的目的，你就不能完全领会Git的强大之处。
git的索引不包含任何文件内容，它仅仅追踪你想要提交的那些内容。当执行提交时，git会通过检查索引而不是工作目录来找到提交的内容。
git status 查询索引的状态，它会明确展示哪些是暂存的

2.git中的文件分类
已追踪的(Tracked)：已经在版本库中的文件或者是已暂存到索引中的文件
被忽略的(Ignored)：被忽略的文件必须在版本库中被明确声明为不可见或被忽略，即使它可能会在工作目录里出现
未追踪的(untracked):未追踪的文件时去掉前两种后，工作目录下的所有文件
echo 4.txt > .gitignore  //git status 显示4.txt为未追踪文件，除非把.gitignore添加到索引中，否则git仍然会把它当成未追踪的文件。

3.添加 git add
git add命令将暂存一个文件，如果git add作用于一个目录名，那么该目录名下的子文件和子目录都会递归暂存起来。
与其说git add是添加一个文件，不如说是添加这个内容
最重要的是要记住工作目录下的文件版本和索引中暂存的文件版本可能是不同步的。提交的时候，git会使用索引中的文件版本。

4.提交 git commit -a //git会递归遍历整个版本库，暂存所有已知的和修改的文件

5.删除 git rm  //从工作目录和索引中删除一个文件，并不会删除该文件在版本库中的历史记录。文件任何版本，只要是提交到版本库中的历史记录的一部分，就会留在对象库里并保存历史记录。
git rm --cached 1.txt //将文件从索引中删除，但仍保留在工作目录下，并将文件标记为未追踪的。
git add 1.txt  //如果想保留从索引中删除的文件
git checkout head -- 1.txt  //恢复从工作目录和索引里删除的文件

6.移动和重命名 
重命名
git rm 1.txt 
git add 111.txt  //先删除再添加
git mv 1.txt 111.txt  //文件的移动
两种方式，git都会在索引中删除原文件的路径名，并添加到新的路径名，而文件内容，仍保存在对象库中，然后才会将其与新111.txt关联
文件的重命名之后如何查询历史记录
git log 111.txt //只显示111.txt由1.txt重命名而来，如果要查询完整的历史记录
git log --follow 111.txt  //让git在日志中回溯并找到内容相关联的整个历史记录。

7.git中对象模型和文件的详细视图